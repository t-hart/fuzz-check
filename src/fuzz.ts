// A module that wraps fast-check to make it easier to use.
import { Arbitrary, assert, property } from "fast-check";

export function fuzz<T0>(
  t0: Arbitrary<T0>,
): (assertion: (t0: T0) => any) => void;
export function fuzz<T0, T1>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
): (assertion: (t0: T0, t1: T1) => any) => void;
export function fuzz<T0, T1, T2>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
): (assertion: (t0: T0, t1: T1, t2: T2) => any) => void;
export function fuzz<T0, T1, T2, T3>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
): (assertion: (t0: T0, t1: T1, t2: T2, t3: T3) => any) => void;
export function fuzz<T0, T1, T2, T3, T4>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
): (assertion: (t0: T0, t1: T1, t2: T2, t3: T3, t4: T4) => any) => void;
export function fuzz<T0, T1, T2, T3, T4, T5>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
): (assertion: (t0: T0, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5) => any) => void;
export function fuzz<T0, T1, T2, T3, T4, T5, T6>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
): (
  assertion: (t0: T0, t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6) => any,
) => void;
export function fuzz<T0, T1, T2, T3, T4, T5, T6, T7>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
  ) => any,
) => void;
export function fuzz<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
  ) => any,
) => void;
export function fuzz<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
  ) => any,
) => void;
export function fuzz<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
  ) => any,
) => void;
export function fuzz<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
  ) => any,
) => void;
export function fuzz<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
  t14: Arbitrary<T14>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
    t14: T14,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
  t14: Arbitrary<T14>,
  t15: Arbitrary<T15>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
    t14: T14,
    t15: T15,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
  t14: Arbitrary<T14>,
  t15: Arbitrary<T15>,
  t16: Arbitrary<T16>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
    t14: T14,
    t15: T15,
    t16: T16,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
  t14: Arbitrary<T14>,
  t15: Arbitrary<T15>,
  t16: Arbitrary<T16>,
  t17: Arbitrary<T17>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
    t14: T14,
    t15: T15,
    t16: T16,
    t17: T17,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
  t14: Arbitrary<T14>,
  t15: Arbitrary<T15>,
  t16: Arbitrary<T16>,
  t17: Arbitrary<T17>,
  t18: Arbitrary<T18>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
    t14: T14,
    t15: T15,
    t16: T16,
    t17: T17,
    t18: T18,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
  t14: Arbitrary<T14>,
  t15: Arbitrary<T15>,
  t16: Arbitrary<T16>,
  t17: Arbitrary<T17>,
  t18: Arbitrary<T18>,
  t19: Arbitrary<T19>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
    t14: T14,
    t15: T15,
    t16: T16,
    t17: T17,
    t18: T18,
    t19: T19,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
  t14: Arbitrary<T14>,
  t15: Arbitrary<T15>,
  t16: Arbitrary<T16>,
  t17: Arbitrary<T17>,
  t18: Arbitrary<T18>,
  t19: Arbitrary<T19>,
  t20: Arbitrary<T20>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
    t14: T14,
    t15: T15,
    t16: T16,
    t17: T17,
    t18: T18,
    t19: T19,
    t20: T20,
  ) => any,
) => void;
export function fuzz<
  T0,
  T1,
  T2,
  T3,
  T4,
  T5,
  T6,
  T7,
  T8,
  T9,
  T10,
  T11,
  T12,
  T13,
  T14,
  T15,
  T16,
  T17,
  T18,
  T19,
  T20,
  T21
>(
  t0: Arbitrary<T0>,
  t1: Arbitrary<T1>,
  t2: Arbitrary<T2>,
  t3: Arbitrary<T3>,
  t4: Arbitrary<T4>,
  t5: Arbitrary<T5>,
  t6: Arbitrary<T6>,
  t7: Arbitrary<T7>,
  t8: Arbitrary<T8>,
  t9: Arbitrary<T9>,
  t10: Arbitrary<T10>,
  t11: Arbitrary<T11>,
  t12: Arbitrary<T12>,
  t13: Arbitrary<T13>,
  t14: Arbitrary<T14>,
  t15: Arbitrary<T15>,
  t16: Arbitrary<T16>,
  t17: Arbitrary<T17>,
  t18: Arbitrary<T18>,
  t19: Arbitrary<T19>,
  t20: Arbitrary<T20>,
  t21: Arbitrary<T21>,
): (
  assertion: (
    t0: T0,
    t1: T1,
    t2: T2,
    t3: T3,
    t4: T4,
    t5: T5,
    t6: T6,
    t7: T7,
    t8: T8,
    t9: T9,
    t10: T10,
    t11: T11,
    t12: T12,
    t13: T13,
    t14: T14,
    t15: T15,
    t16: T16,
    t17: T17,
    t18: T18,
    t19: T19,
    t20: T20,
    t21: T21,
  ) => any,
) => void;

export function fuzz(...args: any[]) {
  // @ts-ignore assuming that your type annotations have held up, this should work
  return (assertion: Function) => assert(property(...args, assertion));
}
